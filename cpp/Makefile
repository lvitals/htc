#
# Makefile para o pr√©-processador C (cpp)
# Originalmente parte da toolchain Hi-Tech C, agora portado para compila√ß√£o moderna com GCC/Clang.
# Data da Revis√£o: 12 de Junho de 2025
#

# --- Configura√ß√£o do Projeto e Ferramentas ---
# Define o compilador C a ser usado. Pode ser trocado por 'clang'.
CC = gcc
# Define a ferramenta de remo√ß√£o para a regra 'clean'.
RM = rm -rf

# --- Nomes e Diret√≥rios ---
# Nome do execut√°vel final que ser√° gerado.
TARGET_NAME = cpp

# Define a estrutura de diret√≥rios do projeto para organiza√ß√£o.
SRCDIR   = src
INCDIR   = include
BUILDDIR = build
BINDIR   = bin

# Gera o caminho completo para o alvo final (ex: bin/cpp).
TARGET = $(BINDIR)/$(TARGET_NAME)


# --- Flags de Compila√ß√£o e Liga√ß√£o ---
#
# CFLAGS: Flags para o compilador C.
# -g                   -> Adiciona informa√ß√µes de depura√ß√£o (para usar com gdb).
# -Wall -Wextra        -> Ativa o m√°ximo de avisos √∫teis. Essencial para c√≥digo de qualidade.
# -O2                  -> N√≠vel de otimiza√ß√£o 2. Um bom balan√ßo entre velocidade e tempo de compila√ß√£o.
# -std=c11             -> Garante que o c√≥digo siga o padr√£o C de 2011, evitando constru√ß√µes antigas.
# -I$(INCDIR)          -> Informa ao compilador para procurar por #includes (como "cpp.h") no nosso diret√≥rio 'include'.
# -DUSE_GETARGS        -> Ativa, via pr√©-processador, o c√≥digo de 'getargs.c' que expande argumentos
#                        na linha de comando (globbing), uma funcionalidade do cpp original.
# -Wno-unused-function -> Suprime o aviso sobre fun√ß√µes est√°ticas n√£o usadas, que pode ocorrer
#                        devido √† forma como os arquivos originais foram estruturados.
CFLAGS = -g -Wall -Wextra -O2 -std=c89 -I$(INCDIR) -DUSE_GETARGS -Wno-unused-function

# LDFLAGS: Flags para o ligador (linker). Usado para incluir bibliotecas (ex: -lm para a biblioteca matem√°tica).
# Nosso projeto n√£o tem depend√™ncias externas, ent√£o fica vazio.
LDFLAGS =


# --- Gera√ß√£o Autom√°tica de Listas de Arquivos ---
#
# SRCS: Cria uma lista de todos os arquivos .c dentro do diret√≥rio 'src'.
# A fun√ß√£o 'wildcard' expande o padr√£o para encontrar os nomes dos arquivos.
SRCS = $(wildcard $(SRCDIR)/*.c)

# OBJS: Cria a lista de arquivos objeto (.o) correspondentes.
# A fun√ß√£o 'patsubst' (pattern substitution) transforma cada item da lista SRCS
# (ex: src/main.c) em seu equivalente no diret√≥rio de compila√ß√£o (ex: build/main.o).
OBJS = $(patsubst $(SRCDIR)/%.c, $(BUILDDIR)/%.o, $(SRCS))


# --- Regras de Compila√ß√£o (Targets) ---
#
# .PHONY: Declara alvos que n√£o s√£o nomes de arquivos. Isso for√ßa 'make' a executar
# a regra sempre que chamada, mesmo que um arquivo com o mesmo nome exista.
.PHONY: all clean re

# 'all' √© a regra padr√£o, executada quando 'make' √© chamado sem argumentos.
# Sua depend√™ncia √© o execut√°vel final.
all: $(TARGET)

# 'clean' remove todos os arquivos gerados, limpando o projeto.
# Usa a vari√°vel $(RM) definida no topo.
clean:
	@echo "üßπ Limpando o projeto..."
	$(RM) $(BUILDDIR) $(BINDIR)

# 're' √© uma regra de conveni√™ncia para "rebuild" (recompilar).
# Executa 'clean' e depois 'all'.
re: clean all


# --- Regras de Padr√£o e Espec√≠ficas ---
#
# Regra de Liga√ß√£o: Descreve como criar o execut√°vel final.
# √â acionada quando todos os seus pr√©-requisitos (os arquivos .o em $(OBJS)) est√£o prontos.
# $@ -> Representa o nome do alvo (neste caso, $(TARGET)).
# $^ -> Representa a lista de todos os pr√©-requisitos (neste caso, $(OBJS)).
$(TARGET): $(OBJS)
	@echo "üîó Ligando o execut√°vel: $@"
	@mkdir -p $(BINDIR)
	$(CC) $(LDFLAGS) -o $@ $^
	@echo "‚úÖ Projeto compilado com sucesso! Execut√°vel em: $(TARGET)"

# Regra de Compila√ß√£o Gen√©rica: √â uma regra de padr√£o que ensina ao 'make'
# como criar um arquivo .o em 'build' a partir de um arquivo .c em 'src'.
# $< -> Representa o nome do primeiro pr√©-requisito (neste caso, o arquivo .c correspondente).
$(BUILDDIR)/%.o: $(SRCDIR)/%.c
	@echo "   Compilando: $<"
	@mkdir -p $(BUILDDIR)
	$(CC) $(CFLAGS) -c $< -o $@

# Regra de Compila√ß√£o Espec√≠fica: Esta regra sobrescreve a gen√©rica APENAS para o arquivo 'expr_parser.c'.
# A necessidade dela √© para adicionar a flag '-Wno-unused-label' e suprimir o aviso inofensivo
# sobre 'yyerrlab', que √© um artefato do c√≥digo gerado pela ferramenta Yacc.
$(BUILDDIR)/expr_parser.o: $(SRCDIR)/expr_parser.c
	@echo "   Compilando parser: $< (suprimindo aviso de label)"
	@mkdir -p $(BUILDDIR)
	$(CC) $(CFLAGS) -Wno-unused-label -c $< -o $@